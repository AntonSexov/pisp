;supported types
INT
BYTE
BOOL
;


(pi

;equal;
(set result 2)
;result = equal;

;math operations ONLY INTEGERS ARE SUPPORTED. NO FLOATING POINT NUMBERS!!!;

;sum;
(set resultSum (+ 1 2))
;resultSum = 3;

;diff;
(set resultDiff (- 41 45))
;same as (set resultDiff (+ -41 45));
;resultDiff = 4;

;division;
(set resultDivision (/ 6 2))
;resultDivision = 3;

;modulo;
(set resultMod (modulo 5 2))
;resultMod = 1;

;miltiplication;
(set resultMul (* 5 2))
;resultmul = 10;

;arrays;
(set intArr (make-arr '(1 2 3 4)))
;intArr = Array [1,2,3,4];
;(get intArr 2) = 3;

;stringify. turn into ascii codes;
(set asciiZero #0)
;asciiZero = 48;

;strings;
(set string (make-string '(Hello World! 1 2 3)))
;string is array of bytes;
;string = ByteArray [72,101,108,108,111,32,87,111,114,108,100,33,49,32,50,32,51];
(get string 2) = 108

;functions;
(defun increment (n) (+ n 1))
(set customFuncResult (increment 2))
;customFuncResult = 3;

;recursion;
(defun incrementXTimes (n x)
 (incrementXTimes (+ 1 n) (- x 1))
)
(set resultRecursiveFunction (incrementXTimes 2 5))
;resultRecursiveFunction = 7;

;loops are not implemented;

;in, out;
;read input from user;
;reads a single line;
(set userInput (read-input))

;print string to console;
(print '(Hello, World!))

;bools and if;
(set truth (> 5 1))
;truth = true;

;if <bool> <true> <false>;
(set n 25)
(set checkN (if (> n 100) 1 0))
;checkN = 0;


sp)